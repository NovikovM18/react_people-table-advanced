{"version":3,"sources":["components/HomePage/index.ts","components/HomePage/HomePage.tsx","components/PersonName/index.ts","components/PersonName/PersonName.tsx","components/PersonRow/index.ts","components/PersonRow/PersonRow.tsx","components/PeopleTable/index.ts","components/PeopleTable/PeopleTable.tsx","api/people.ts","components/PeoplePage/index.ts","components/PeoplePage/PeoplePage.tsx","App.tsx","index.tsx"],"names":["HomePage","PersonName","person","search","useLocation","to","pathname","slug","className","classNames","maleColor","sex","femaleColor","name","PersonRow","personSlug","useParams","born","died","mother","motherName","father","fatherName","PeopleTable","people","sortBy","sortOrder","useState","currentSortBy","setCurrentSortBy","useSearchParams","searchParams","setSearchParams","onSortByChange","sortType","currentSortOrder","set","columnClasses","columnName","arrowImage","src","process","alt","onClick","map","getPeople","a","fetch","response","json","peopleFromServer","personWithParents","find","PeoplePage","appliedQuery","get","setPeople","query","setQuery","fetchPeople","useEffect","applyQuery","useCallback","debounce","newQuery","delete","visiblePeople","filter","lowerQuery","toLowerCase","includes","sort","b","localeCompare","htmlFor","type","id","placeholder","value","onChange","event","target","App","path","element","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df48dc5b.chunk.js","sourcesContent":["import { HomePage } from './HomePage';\n\nexport default HomePage;\n","import React from 'react';\n\nexport const HomePage: React.FC = () => (\n  <h1>Home page</h1>\n);\n","import { PersonName } from './PersonName';\n\nexport default PersonName;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport './PersonName.scss';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonName: React.FC<Props> = ({ person }) => {\n  const { search } = useLocation();\n\n  return (\n    <Link\n      to={{\n        pathname: `/people/${person.slug}`,\n        search,\n      }}\n      className={classNames({\n        maleColor: person.sex === 'm',\n        femaleColor: person.sex === 'f',\n      })}\n    >\n      {person.name}\n    </Link>\n  );\n};\n","import { PersonRow } from './PersonRow';\n\nexport default PersonRow;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PersonName from '../PersonName';\n\nimport './PersonRow.scss';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonRow: React.FC<Props> = ({ person }) => {\n  const { personSlug } = useParams<{ personSlug: string }>();\n\n  return (\n    <tr className={classNames({ 'selected-person': personSlug === person.slug })}>\n      <td>\n        <PersonName person={person} />\n      </td>\n      <td>{person.sex}</td>\n      <td>{person.born}</td>\n      <td>{person.died}</td>\n      <td>\n        {person.mother\n          ? <PersonName person={person.mother} />\n          : <b>{person.motherName}</b>}\n      </td>\n      <td>\n        {person.father ? (\n          <PersonName person={person.father} />\n        ) : <b>{person.fatherName}</b>}\n      </td>\n    </tr>\n  );\n};\n","import { PeopleTable } from './PeopleTable';\n\nexport default PeopleTable;\n","import React, { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PersonRow from '../PersonRow';\n\nimport './PeopleTable.scss';\n\ntype Props = {\n  people: Person[],\n  sortBy: string | null,\n  sortOrder: string | null,\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, sortBy, sortOrder }) => {\n  const [currentSortBy, setCurrentSortBy] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const onSortByChange = (sortType: string) => {\n    let currentSortOrder = sortOrder;\n\n    if (currentSortBy !== sortType) {\n      setCurrentSortBy(sortType);\n      currentSortOrder = null;\n    }\n\n    searchParams.set('sortBy', sortType);\n    if (currentSortOrder === 'asc') {\n      searchParams.set('sortOrder', 'desc');\n    } else {\n      searchParams.set('sortOrder', 'asc');\n    }\n\n    setSearchParams(searchParams);\n  };\n\n  const columnClasses = (columnName: string): string => {\n    return classNames(\n      'sort-button',\n      { 'sort-button--selected': sortBy === columnName },\n    );\n  };\n\n  const arrowImage = (columnName: string) => {\n    if (sortBy !== columnName) {\n      return (\n        <img\n          src={`${process.env.PUBLIC_URL}/images/sort_both.png`}\n          alt=\"img\"\n          className=\"sort-button__arrow\"\n        />\n      );\n    }\n\n    if (sortOrder === 'desc') {\n      return (\n        <img\n          src={`${process.env.PUBLIC_URL}/images/sort_asc.png`}\n          alt=\"img\"\n          className=\"sort-button__arrow\"\n        />\n      );\n    }\n\n    return (\n      <img\n        src={`${process.env.PUBLIC_URL}/images/sort_desc.png`}\n        alt=\"img\"\n        className=\"sort-button__arrow\"\n      />\n    );\n  };\n\n  return (\n    <table className=\"PeopleTable\">\n      <thead>\n        <tr className=\"PeopleTable__head\">\n          <th\n            onClick={() => onSortByChange('name')}\n            className={columnClasses('name')}\n          >\n            Name\n            {arrowImage('name')}\n          </th>\n          <th\n            onClick={() => onSortByChange('sex')}\n            className={columnClasses('sex')}\n          >\n            Sex\n            {arrowImage('sex')}\n          </th>\n          <th\n            onClick={() => onSortByChange('died')}\n            className={columnClasses('died')}\n          >\n            Born\n            {arrowImage('died')}\n          </th>\n          <th\n            onClick={() => onSortByChange('born')}\n            className={columnClasses('born')}\n          >\n            Died\n            {arrowImage('born')}\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {people.map(person => (\n          <PersonRow key={person.slug} person={person} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async (): Promise<Person[]> => {\n  try {\n    const response = await fetch(`${API_URL}`);\n    const peopleFromServer = await response.json();\n\n    return peopleFromServer.map((person: Person) => {\n      const personWithParents = { ...person };\n\n      personWithParents.mother = peopleFromServer\n        .find((mother: Person) => mother.name === person.motherName);\n      personWithParents.father = peopleFromServer\n        .find((father: Person) => father.name === person.fatherName);\n\n      return personWithParents;\n    });\n  } catch (error) {\n    return [];\n  }\n};\n","import { PeoplePage } from './PeoplePage';\n\nexport default PeoplePage;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport debounce from 'lodash/debounce';\n\nimport PeopleTable from '../PeopleTable';\nimport { getPeople } from '../../api/people';\n\nimport './PeoplePage.scss';\n\nexport const PeoplePage: React.FC = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const appliedQuery = searchParams.get('query');\n  const sortBy = searchParams.get('sortBy');\n  const sortOrder = searchParams.get('sortOrder');\n\n  const [people, setPeople] = useState<Person[]>([]);\n  const [query, setQuery] = useState(appliedQuery);\n\n  const fetchPeople = async () => {\n    setPeople(await getPeople());\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  const applyQuery = useCallback(\n    debounce((newQuery: string) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n        setSearchParams(searchParams);\n      } else {\n        searchParams.delete('query');\n        setSearchParams(searchParams);\n      }\n    }, 500),\n    [],\n  );\n\n  const onQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  let visiblePeople = appliedQuery\n    ? people.filter(person => {\n      const lowerQuery = appliedQuery.toLowerCase();\n\n      return person.name?.toLowerCase().includes(lowerQuery)\n      || person.motherName?.toLowerCase().includes(lowerQuery)\n      || person.fatherName?.toLowerCase().includes(lowerQuery);\n    })\n    : people;\n\n  if (sortBy) {\n    switch (sortBy) {\n      case 'name':\n      case 'sex': {\n        visiblePeople = [...visiblePeople].sort((a, b) => {\n          switch (sortOrder) {\n            case 'asc':\n              return a[sortBy].localeCompare(b[sortBy]);\n\n            case 'desc':\n              return b[sortBy].localeCompare(a[sortBy]);\n\n            default:\n              return 0;\n          }\n        });\n        break;\n      }\n\n      case 'born':\n      case 'died': {\n        visiblePeople = [...visiblePeople].sort((a, b) => {\n          switch (sortOrder) {\n            case 'asc':\n              return a[sortBy] - b[sortBy];\n\n            case 'desc':\n              return b[sortBy] - a[sortBy];\n\n            default:\n              return 0;\n          }\n        });\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  return (\n    <>\n      <h1>People page</h1>\n      <label htmlFor=\"query\">\n        Search: &nbsp;\n        <input\n          type=\"text\"\n          id=\"query\"\n          placeholder=\"Search\"\n          value={query || ''}\n          onChange={onQueryChange}\n          className=\"mb-10\"\n        />\n      </label>\n      <div className=\"container\">\n        <PeopleTable\n          people={visiblePeople}\n          sortBy={sortBy}\n          sortOrder={sortOrder}\n        />\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Routes, Route, Link, Navigate,\n} from 'react-router-dom';\n\nimport HomePage from './components/HomePage';\nimport PeoplePage from './components/PeoplePage';\n\nimport './App.scss';\n\nconst App: React.FC = () => (\n  <div className=\"App\">\n    <header>\n      <nav>\n        <Link to=\"/\" className=\"nav-link\">Home</Link>\n        <Link to=\"/people\" className=\"nav-link\">People</Link>\n      </nav>\n    </header>\n\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route path=\"/people\" element={<PeoplePage />} />\n\n      <Route path=\"/people/:personSlug\" element={<PeoplePage />} />\n      <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"*\" element={<h1>Page Not Found</h1>} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}